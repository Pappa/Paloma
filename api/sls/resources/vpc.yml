Resources:
  PalomaVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16

  # Our VPC will need internet access:
  PalomaInternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: PalomaVpc
  PalomaAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref PalomaVpc
      InternetGatewayId: !Ref PalomaInternetGateway

  # Now some subnets, 2 public and 2 private:
  PalomaPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PalomaVpc
      CidrBlock: 10.1.10.0/24
      AvailabilityZone: !Select [0, !GetAZs eu-west-1]
  PalomaPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PalomaVpc
      CidrBlock: 10.1.20.0/24
      AvailabilityZone: !Select [1, !GetAZs eu-west-1]
  PalomaPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PalomaVpc
      CidrBlock: 10.1.50.0/24
      AvailabilityZone: !Select [0, !GetAZs eu-west-1]
  PalomaPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PalomaVpc
      CidrBlock: 10.1.60.0/24
      AvailabilityZone: !Select [1, !GetAZs eu-west-1]

  # Some route tables for our subnets:
  PalomaPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PalomaVpc

  PalomaPublicRoute1: # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: PalomaAttachGateway
    Properties:
      RouteTableId: !Ref PalomaPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref PalomaInternetGateway

  # Here is a private route table:
  PalomaPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PalomaVpc

  PalomaPrivateRoute1: # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PalomaPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref PalomaNATGateway

  # Attach the public subnets to public route tables,
  # and attach the private subnets to private route tables:
  PalomaPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PalomaPublicSubnet1
      RouteTableId: !Ref PalomaPublicRouteTable
  PalomaPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PalomaPublicSubnet2
      RouteTableId: !Ref PalomaPublicRouteTable
  PalomaPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PalomaPrivateSubnet1
      RouteTableId: !Ref PalomaPrivateRouteTable
  PalomaPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PalomaPrivateSubnet2
      RouteTableId: !Ref PalomaPrivateRouteTable

  # A NAT Gateway:
  PalomaNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PalomaElasticIPAddress.AllocationId
      SubnetId: !Ref PalomaPublicSubnet1
  PalomaElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: PalomaVpc

Outputs:
  PalomaPrivateSubnet1Id:
    Value:
      Ref: PalomaPrivateSubnet1
  PalomaPrivateSubnet2Id:
    Value:
      Ref: PalomaPrivateSubnet2
